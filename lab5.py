# -*- coding: utf-8 -*-
"""Lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zCD220DmAxq5ZL7TTwBRAYwQRnj0q3rK
"""

from google.colab import files

uploaded = files.upload()  # Selecciona los 3 archivos MP3

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt, find_peaks
import pywt

# Cargar datos
datos = np.loadtxt('valentina.txt', delimiter=',')
tiempo = datos[:, 0]*30
ecg = datos[:, 1]

# Colores pastel para los plots
color_ecg_original = '#5D3A9B'   # morado oscuro
color_ecg_filtrada = '#a8dadc'   # azul pastel claro
color_picos = '#ffb3b3'          # rojo pastel claro
color_rr = '#b0d6b0'             # verde pastel claro
color_rr_line = '#c3aed6'        # lavanda pastel

fs = 500
lowcut = 0.5
highcut = 40

def butter_bandpass(lowcut, highcut, fs, order=4):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(order, [low, high], btype='band')
    return b, a

def aplicar_filtro(data, lowcut, highcut, fs, order=4):
    b, a = butter_bandpass(lowcut, highcut, fs, order=order)
    y = filtfilt(b, a, data)
    return y

ecg_normalizada = ecg / np.max(np.abs(ecg))
ecg_filtrada = aplicar_filtro(ecg_normalizada, lowcut, highcut, fs)

# Gráfica 1: Señal ECG original
plt.figure(figsize=(10, 6))
plt.plot(tiempo, ecg, label='Señal ECG', color=color_ecg_original)
plt.title('Señal ECG')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud [mV]')
plt.legend()
plt.grid()
plt.show()

# Gráfica 2: Señal ECG filtrada
plt.figure(figsize=(10, 6))
plt.plot(tiempo, ecg_filtrada, label='ECG Filtrada', color=color_ecg_filtrada)
plt.title('Señal ECG Filtrada')
plt.xlabel('Tiempo [s]')
plt.ylabel('Amplitud [mV]')
plt.legend()
plt.grid()
plt.show()

# Detección de picos R
picos_R, _ = find_peaks(ecg_filtrada, height=0.3, distance=fs*0.1)
print(f'Número de picos R detectados: {len(picos_R)}')

# Gráfica 3: Detección de Picos R
plt.figure(figsize=(10, 6))
plt.plot(tiempo, ecg_filtrada, label='ECG ', color=color_rr_line)
plt.plot(tiempo[picos_R], ecg_filtrada[picos_R], '*', label='Picos R', color=color_picos)
plt.title('Detección de Picos R')
plt.xlabel('Tiempo [s]')
plt.ylabel('Amplitud [mV]')
plt.legend()
plt.grid()
plt.show()

intervalos_RR = np.diff(tiempo[picos_R])  # Diferencias de tiempo entre picos R
print("Intervalos R-R (en segundos):", intervalos_RR)

# Gráfica 4: Intervalos R-R
plt.figure(figsize=(10, 6))
plt.plot(intervalos_RR, linestyle='-', color=color_rr)
plt.title('Intervalos R-R')
plt.xlabel('Número de intervalo')
plt.ylabel('Tiempo [s]')
plt.grid()
plt.show()

# Estadísticas HRV
media_RR = np.mean(intervalos_RR)
desviacion_RR = np.std(intervalos_RR)
print(f"Media de los intervalos R-R: {media_RR:.4f} s")
print(f"Desviación estándar de los intervalos R-R: {desviacion_RR:.4f} s")

# Última gráfica: Espectrograma (mantengo colores originales)
fs = 1.0 / np.mean(intervalos_RR)
frecuencias = np.linspace(0.04, 0.15, 500)  # Rango LF y HF Hz

escalas = pywt.scale2frequency('cmor', 1) / (frecuencias * fs)
coeficientes, _ = pywt.cwt(intervalos_RR, escalas, 'cmor')

plt.figure(figsize=(12, 8))
plt.imshow(np.abs(coeficientes), extent=[0, len(intervalos_RR), frecuencias[-1], frecuencias[0]],
           cmap='jet', aspect='auto')
plt.colorbar(label='Magnitud')
plt.title('Espectrograma de HRV usando Wavelet Continua (Morlet)')
plt.xlabel('Número de intervalo')
plt.ylabel('Frecuencia (Hz)')
plt.gca().invert_yaxis()
plt.show()